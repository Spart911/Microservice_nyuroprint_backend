import aiohttp
from aiogram import Router, types
from config import user_defects, GAME_API_URL, defect_options, API_USER
from utils.utils_privacy_policy_status import check_privacy_policy_status
from utils.utils_markup import get_defect_keyboard, start_test, send_instruction, get_game_uid, get_photo, send_photo_with_defects
from keyboards import keyboard_policy
from aiogram.fsm.context import FSMContext

router = Router()


@router.message(lambda message: message.text == "üïπ –ú–∏–Ω–∏-–∏–≥—Ä–∞")
async def mini_game(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–∏–≥—Ä—ã"""
    user_id = message.from_user.id
    privacy_status = await check_privacy_policy_status(user_id)

    if privacy_status == 0:
        await message.answer(
            "–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=keyboard_policy,
        )
        return
    elif privacy_status == 2:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    await state.update_data(instruction_message_id=None, photo_index=1)
    await send_instruction(message, state)


@router.callback_query(lambda c: c.data.startswith("toggle_"))
async def toggle_defect(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —á–µ–∫–±–æ–∫—Å –¥–µ—Ñ–µ–∫—Ç–∞"""
    user_id = callback.from_user.id
    defect = callback.data.split("_")[1]

    if user_id not in user_defects:
        user_defects[user_id] = set()

    if defect in user_defects[user_id]:
        user_defects[user_id].remove(defect)
    else:
        user_defects[user_id].add(defect)

    await callback.message.edit_reply_markup(reply_markup=get_defect_keyboard(user_id))
    await callback.answer()


@router.callback_query(lambda c: c.data == "skip")
async def skip_defects(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    user_id = callback.from_user.id
    await callback.message.delete()
    await callback.answer()

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
    uid = await get_game_uid()
    if uid:
        photo_data = await get_photo(uid)
        if photo_data:
            await state.update_data(photo_uid=uid)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º UID –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
            await send_photo_with_defects(user_id, photo_data, uid, callback.message)
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ.")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ UID —Ñ–æ—Ç–æ.")


@router.callback_query(lambda c: c.data == "submit")
async def submit_defects(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = callback.from_user.id
    selected_defects = user_defects.get(user_id, [])
    selected_defects_str = ",".join(str(defect_options.index(d)) for d in selected_defects if d in defect_options)
    await callback.message.delete()
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º UID —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    uid = data.get("photo_uid")
    if not uid:
        await callback.message.answer("–û—à–∏–±–∫–∞: UID —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–∞ API
    payload = {"userUid": str(user_id), "uid": uid, "target": selected_defects_str}
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{GAME_API_URL}/process-test", json=payload, ssl=False) as response:
            if response.status != 200:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
                return

            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            try:
                async with session.put(f"{API_USER}/users/telegram/{user_id}/increment-bonus") as bonus_response:
                    if bonus_response.status != 200:
                        error_text = await bonus_response.text()
                        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤: {error_text}")
            except Exception as e:
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤: {str(e)}")

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
    uid = await get_game_uid()
    if uid:
        photo_data = await get_photo(uid)
        if photo_data:
            await state.update_data(photo_uid=uid)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º UID –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
            await send_photo_with_defects(user_id, photo_data, uid, callback.message)
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ.")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ UID —Ñ–æ—Ç–æ.")



@router.callback_query(lambda c: c.data in ["next", "previous", "start_test"])
async def instruction_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_index = data.get("photo_index", 1)
    max_index = 8

    if callback_query.data == "start_test":
        await start_test(callback_query.message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º state –≤ —Ñ—É–Ω–∫—Ü–∏—é start_test
        return

    if callback_query.data == "previous":
        photo_index = max(1, photo_index - 1)
    elif callback_query.data == "next":
        photo_index = min(max_index, photo_index + 1)

    await state.update_data(photo_index=photo_index)
    await send_instruction(callback_query.message, state)
    await callback_query.answer()