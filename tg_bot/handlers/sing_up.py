import logging
import aiohttp
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import API_USER
from class_states import Registration
from utils.utils_sing_up import is_valid_email, is_valid_password
from keyboards import menu_keyboard

router = Router()

# Create a registration keyboard that includes the cancel option
registration_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"), KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    ],
    resize_keyboard=True
)


@router.message(lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.debug(f"User {user_id} selected registration")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_USER}/users/telegram/{user_id}") as response:
            if response.status == 200:
                await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
                return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ email
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=registration_keyboard)
    await state.set_state(Registration.email)



@router.message(Registration.email, lambda message: message.text not in ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"])
async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    if not is_valid_email(email):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", reply_markup=registration_keyboard)
        return

    await state.update_data(email=email)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=registration_keyboard)
    await state.set_state(Registration.password)


@router.message(Registration.password, lambda message: message.text not in ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"])
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    if not is_valid_password(password):
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.",
                           reply_markup=registration_keyboard)
        return

    data = await state.get_data()
    email = data["email"]
    user_id = str(message.from_user.id)
    amount_bonuses = 0  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤

    async with aiohttp.ClientSession() as session:
        async with session.post(
                f"{API_USER}/users/",
                json={
                    "id_telegram": user_id,
                    "amount_bonuses": amount_bonuses,
                    "email": email,
                    "password": password
                }
        ) as response:
            if response.status == 200:
                await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=menu_keyboard)
            elif response.status == 400:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=menu_keyboard)
            else:
                error_text = await response.text()
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_text}", reply_markup=menu_keyboard)

    await state.clear()


@router.message(lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def complete_registration(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == Registration.email:
        # If at email state, remind user they need to enter email first
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.", reply_markup=registration_keyboard)
        return
    elif current_state == Registration.password:
        # We should NOT call process_password directly
        # Instead, remind user to enter their password
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=registration_keyboard)
        return
    else:
        await message.answer("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=registration_keyboard)
        await state.set_state(Registration.email)


@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def cancel_registration(message: types.Message, state: FSMContext):
    # This should work regardless of the current registration state
    await state.clear()  # Clear registration state
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.",
                         reply_markup=menu_keyboard)  # Return to the main menu