from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
from aiohttp import FormData

from class_states import DefectRecognition
from config import bot, DETECT_API, quality_options, default_printers
from utils.utils_privacy_policy_status import check_privacy_policy_status

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
defect_names_and_fixes = {
    0: ("*–ù–µ–¥–æ—ç–∫—Å—Ç—Ä—É–∑–∏—è*\n",
        "‚ûú **–£–≤–µ–ª–∏—á—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–æ–ø–ª–∞** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –∑–∞—Å–æ—Ä–∞ –≤ —ç–∫—Å—Ç—Ä—É–¥–µ—Ä–µ** \n"
        "‚ûú **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∏–ª–∞–º–µ–Ω—Ç –ø–æ–¥–∞–µ—Ç—Å—è –±–µ–∑ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –ø–æ–¥–∞—á–∏ —Ñ–∏–ª–∞–º–µ–Ω—Ç–∞** "),
    1: ("*–ü–µ—Ä–µ—ç–∫—Å—Ç—Ä—É–∑–∏—è*\n",
        "‚ûú **–£–º–µ–Ω—å—à–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–æ–ø–ª–∞** \n"
        "‚ûú **–°–Ω–∏–∑—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –ø–æ–¥–∞—á–∏ —Ñ–∏–ª–∞–º–µ–Ω—Ç–∞** "),
    2: ("*–°–æ–ø–ª–∏*\n",
        "‚ûú **–í–∫–ª—é—á–∏—Ç–µ —Ä–µ—Ç—Ä–∞–∫—Ç (–æ—Ç–∫–∞—Ç) —Ñ–∏–ª–∞–º–µ–Ω—Ç–∞** \n"
        "‚ûú **–£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–µ–∑ —ç–∫—Å—Ç—Ä—É–∑–∏–∏** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–æ–ø–ª–∞** "),
    3: ("*–û—Ç–ª–∏–ø–∞–Ω–∏–µ*\n",
        "‚ûú **–£–ª—É—á—à–∏—Ç–µ –∞–¥–≥–µ–∑–∏—é –∫ —Å—Ç–æ–ª—É (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–µ–π, –ª–∞–∫, –ø–æ–¥–æ–≥—Ä–µ–≤)** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É —Å—Ç–æ–ª–∞** \n"
        "‚ûú **–£–º–µ–Ω—å—à–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏** "),
    4: ("*–ü—É–∑—ã—Ä–∏*\n",
        "‚ûú **–ü—Ä–æ—Å—É—à–∏—Ç–µ —Ñ–∏–ª–∞–º–µ–Ω—Ç** \n"
        "‚ûú **–£–º–µ–Ω—å—à–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–æ–ø–ª–∞** \n"
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª–∞–º–µ–Ω—Ç–∞** "),
    5: ("*–†–∞—Å—Å–ª–æ–µ–Ω–∏–µ*\n",
        "‚ûú **–£–≤–µ–ª–∏—á—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–æ–ø–ª–∞** \n"
        "‚ûú **–£–º–µ–Ω—å—à–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏** \n"
        "‚ûú **–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ–µ** "),
    6: ("*–í–æ–ª–Ω–∏—Å—Ç–æ—Å—Ç—å*\n",
        "‚ûú **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ —Ä–µ–º–Ω–µ–π** \n"
        "‚ûú **–°–Ω–∏–∑—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏** \n"
        "‚ûú **–£–º–µ–Ω—å—à–∏—Ç–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞** ")
}


@router.message(F.text == "üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã")
async def recognize_defects(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    privacy_status = await check_privacy_policy_status(user_id)

    if privacy_status == 0:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data="accept_privacy_policy")],
            [types.InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                                        callback_data="view_privacy_policy")]
        ])
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è.",
                             reply_markup=keyboard)
        return
    elif privacy_status == 2:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    printer_kb = InlineKeyboardBuilder()
    for printer in default_printers[1:]:
        printer_kb.row(types.InlineKeyboardButton(text=printer["name"], callback_data=f"printer_{printer['id']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à 3D-–ø—Ä–∏–Ω—Ç–µ—Ä:", reply_markup=printer_kb.as_markup())
    await state.set_state(DefectRecognition.printer)


@router.callback_query(F.data.startswith("printer_"))
async def process_printer_selection(callback: types.CallbackQuery, state: FSMContext):
    printer_id = callback.data.split("_")[1]
    await state.update_data(printer_id=printer_id)

    quality_kb = InlineKeyboardBuilder()
    for quality in quality_options:
        quality_kb.row(types.InlineKeyboardButton(text=quality, callback_data=f"quality_{quality}"))

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏:", reply_markup=quality_kb.as_markup())
    await state.set_state(DefectRecognition.quality)
    await callback.answer()


@router.callback_query(F.data.startswith("quality_"))
async def process_quality_selection(callback: types.CallbackQuery, state: FSMContext):
    quality = callback.data.split("quality_")[1]
    await state.update_data(quality=quality_options.get(quality, 1))

    await callback.message.edit_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–π –Ω–∞ 3D –ø—Ä–∏–Ω—Ç–µ—Ä–µ –¥–µ—Ç–∞–ª–∏.")
    await state.set_state(DefectRecognition.photo)
    await callback.answer()


@router.message(DefectRecognition.photo, F.photo)
async def process_photo_upload(message: types.Message, state: FSMContext):
    loading_message = await message.answer("‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...*", parse_mode="Markdown")
    try:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file = await bot.download_file(file_info.file_path)

        data = await state.get_data()
        printer_id = data.get("printer_id")
        quality = data.get("quality", 1)

        form_data = FormData()
        form_data.add_field('printer_id', str(printer_id))
        form_data.add_field('quality', str(quality))
        form_data.add_field('img', file, filename='photo.jpg')

        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
            async with session.post(f"{DETECT_API}/api/prints/", data=form_data) as response:
                if response.status == 200:
                    result = await response.json()
                    detected_defects = result.get("defect", [])
                    if detected_defects:
                        await message.answer("üî¥ *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–µ–∫—Ç—ã:*", parse_mode="Markdown")
                        for defect_code in detected_defects:
                            defect_name, fix = defect_names_and_fixes.get(defect_code,
                                                                          ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç", "–ù–µ—Ç —Ä–µ—à–µ–Ω–∏—è"))
                            await message.answer(f"**{defect_name}**\n{fix}", parse_mode="Markdown")

                        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                        feedback_kb = InlineKeyboardBuilder()
                        feedback_kb.row(
                            types.InlineKeyboardButton(text="üëç", callback_data="rate_5"),
                            types.InlineKeyboardButton(text="üôÇ", callback_data="rate_4"),
                            types.InlineKeyboardButton(text="üòê", callback_data="rate_3"),
                            types.InlineKeyboardButton(text="üôÅ", callback_data="rate_2"),
                            types.InlineKeyboardButton(text="üëé", callback_data="rate_1")
                        )
                        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:", reply_markup=feedback_kb.as_markup())
                    else:
                        await message.answer("‚úÖ *–î–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!*", parse_mode="Markdown")
                else:
                    await message.answer("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.*", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ö† *–û—à–∏–±–∫–∞:* {e}", parse_mode="Markdown")
    finally:
        await bot.delete_message(chat_id=loading_message.chat.id, message_id=loading_message.message_id)
        await state.clear()


@router.callback_query(F.data.startswith("rate_"))
async def process_rating(callback: types.CallbackQuery):
    rating = int(callback.data.split("_")[1])
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
            async with session.post(f"{DETECT_API}/api/feedback/", json={"rating": rating}) as response:
                if response.status == 200:
                    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
                else:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
