import os
import shutil
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
DIR_DETECT = os.getenv("DIR_DETECT", "dir_detect")
DIR_MARKUP = os.getenv("DIR_MARKUP", "dir_markup")

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(DIR_DETECT, exist_ok=True)
os.makedirs(DIR_MARKUP, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


async def get_next_photo():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ DIR_DETECT –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç"""
    files = sorted(os.listdir(DIR_DETECT))  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    for file in files:
        if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            return file
    return None


@dp.message(Command("start"))
@dp.message(Command("validate"))
async def start_validation(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    filename = await get_next_photo()

    if not filename:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    filepath = os.path.join(DIR_DETECT, filename)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"approve|{filename}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"reject|{filename}")]
    ])

    photo = FSInputFile(filepath)
    await message.answer_photo(photo, caption=f"–§–∞–π–ª: {filename}", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("approve|"))
async def approve_photo(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É DIR_MARKUP"""
    filename = callback.data.split("|")[1]
    src_path = os.path.join(DIR_DETECT, filename)
    dst_path = os.path.join(DIR_MARKUP, filename)

    if os.path.exists(src_path):
        shutil.move(src_path, dst_path)
        await callback.message.answer(f"‚úÖ –§–∞–π–ª {filename} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        await callback.message.answer("‚ö† –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    await callback.message.delete()
    await start_validation(callback.message)


@dp.callback_query(F.data.startswith("reject|"))
async def reject_photo(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ"""
    filename = callback.data.split("|")[1]
    file_path = os.path.join(DIR_DETECT, filename)

    if os.path.exists(file_path):
        os.remove(file_path)
        await callback.message.answer(f"‚ùå –§–∞–π–ª {filename} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer("‚ö† –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    await callback.message.delete()
    await start_validation(callback.message)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîπ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
